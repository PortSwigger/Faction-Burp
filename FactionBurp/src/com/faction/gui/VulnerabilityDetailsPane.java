package com.faction.gui;

import java.util.List;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.GridBagLayout;

import javax.swing.JLabel;

import java.awt.GridBagConstraints;

import javax.swing.JScrollPane;

import java.awt.Insets;

import javax.swing.JEditorPane;
import javax.swing.border.TitledBorder;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;

import org.apache.commons.lang.StringEscapeUtils;

import com.faction.api.FactionAPI;
import com.sun.jersey.core.util.Base64;

import burp.IBurpExtenderCallbacks;
import burp.api.montoya.MontoyaApi;
import burp.api.montoya.http.message.requests.HttpRequest;

import javax.swing.border.LineBorder;

import java.awt.Color;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.awt.Font;

public class VulnerabilityDetailsPane extends JFrame{
	private String Description;
	private String Recommendation;
	private List<String> Steps;
	private List<String> Images;
	private List<Integer> ImageIds;
	private String Name;
	
	public VulnerabilityDetailsPane(FactionAPI factionApi, String Name, String Description, String Recommendation, String Details, IBurpExtenderCallbacks legacyCallback){
		this.Description = Description;
		this.Recommendation = Recommendation;
		this.Steps = Steps;
		this.Images = Images;
		this.Name = Name;
		this.ImageIds = ImageIds;
		GridBagLayout gridBagLayout = new GridBagLayout();
		gridBagLayout.columnWidths = new int[]{0, 0, 0};
		gridBagLayout.rowHeights = new int[]{20, 50, 257, 0};
		gridBagLayout.columnWeights = new double[]{1.0, 1.0, Double.MIN_VALUE};
		gridBagLayout.rowWeights = new double[]{0.0, 0.0, 1.0, Double.MIN_VALUE};
		getContentPane().setLayout(gridBagLayout);
		
		JLabel nameTxt = new JLabel("New label");
		nameTxt.setFont(new Font("Arial", Font.BOLD, 20));
		GridBagConstraints gbc_nameTxt = new GridBagConstraints();
		gbc_nameTxt.gridwidth = 2;
		gbc_nameTxt.anchor = GridBagConstraints.NORTH;
		gbc_nameTxt.insets = new Insets(0, 0, 5, 5);
		gbc_nameTxt.gridx = 0;
		gbc_nameTxt.gridy = 0;
		getContentPane().add(nameTxt, gbc_nameTxt);
		
		JPanel panel = new JPanel();
		panel.setBorder(new TitledBorder(new LineBorder(new Color(184, 207, 229)), "Description", TitledBorder.LEADING, TitledBorder.TOP, null, new Color(51, 51, 51)));
		GridBagConstraints gbc_panel = new GridBagConstraints();
		gbc_panel.fill = GridBagConstraints.BOTH;
		gbc_panel.insets = new Insets(0, 0, 5, 5);
		gbc_panel.gridx = 0;
		gbc_panel.gridy = 1;
		getContentPane().add(panel, gbc_panel);
		GridBagLayout gbl_panel = new GridBagLayout();
		gbl_panel.columnWidths = new int[]{0, 0};
		gbl_panel.rowHeights = new int[]{0, 0};
		gbl_panel.columnWeights = new double[]{1.0, Double.MIN_VALUE};
		gbl_panel.rowWeights = new double[]{1.0, Double.MIN_VALUE};
		panel.setLayout(gbl_panel);
		
		JScrollPane scrollPane = new JScrollPane();
		GridBagConstraints gbc_scrollPane = new GridBagConstraints();
		gbc_scrollPane.fill = GridBagConstraints.BOTH;
		gbc_scrollPane.gridx = 0;
		gbc_scrollPane.gridy = 0;
		panel.add(scrollPane, gbc_scrollPane);
		
		JEditorPane descTxt = new JEditorPane();
		descTxt.setEditorKitForContentType("text/html", new Base64HtmlEditor());
		descTxt.setEditable(false);
		descTxt.setContentType("text/html");
		scrollPane.setViewportView(descTxt);
		
		
		JPanel panel_1 = new JPanel();
		panel_1.setBorder(new TitledBorder(new LineBorder(new Color(184, 207, 229)), "Recommendation", TitledBorder.LEADING, TitledBorder.TOP, null, new Color(51, 51, 51)));
		GridBagConstraints gbc_panel_1 = new GridBagConstraints();
		gbc_panel_1.fill = GridBagConstraints.BOTH;
		gbc_panel_1.insets = new Insets(0, 0, 5, 0);
		gbc_panel_1.gridx = 1;
		gbc_panel_1.gridy = 1;
		getContentPane().add(panel_1, gbc_panel_1);
		GridBagLayout gbl_panel_1 = new GridBagLayout();
		gbl_panel_1.columnWidths = new int[]{0, 0};
		gbl_panel_1.rowHeights = new int[]{182, 0};
		gbl_panel_1.columnWeights = new double[]{1.0, Double.MIN_VALUE};
		gbl_panel_1.rowWeights = new double[]{1.0, Double.MIN_VALUE};
		panel_1.setLayout(gbl_panel_1);
		
		JScrollPane scrollPane_1 = new JScrollPane();
		GridBagConstraints gbc_scrollPane_1 = new GridBagConstraints();
		gbc_scrollPane_1.fill = GridBagConstraints.BOTH;
		gbc_scrollPane_1.gridx = 0;
		gbc_scrollPane_1.gridy = 0;
		panel_1.add(scrollPane_1, gbc_scrollPane_1);
		
		JEditorPane recTxt = new JEditorPane();
		recTxt.setEditable(false);
		recTxt.setEditorKitForContentType("text/html", new Base64HtmlEditor());
		recTxt.setContentType("text/html");
		scrollPane_1.setViewportView(recTxt);
		recTxt.setText(this.Recommendation);
		recTxt.setCaretPosition(0);
		
		JPanel panel_2 = new JPanel();
		panel_2.setBorder(new TitledBorder(new LineBorder(new Color(184, 207, 229)), "Exploit Steps", TitledBorder.LEADING, TitledBorder.TOP, null, new Color(51, 51, 51)));
		GridBagConstraints gbc_panel_2 = new GridBagConstraints();
		gbc_panel_2.gridwidth = 2;
		gbc_panel_2.fill = GridBagConstraints.BOTH;
		gbc_panel_2.gridx = 0;
		gbc_panel_2.gridy = 2;
		getContentPane().add(panel_2, gbc_panel_2);
		GridBagLayout gbl_panel_2 = new GridBagLayout();
		gbl_panel_2.columnWidths = new int[]{0, 0};
		gbl_panel_2.rowHeights = new int[]{257, 0};
		gbl_panel_2.columnWeights = new double[]{1.0, Double.MIN_VALUE};
		gbl_panel_2.rowWeights = new double[]{1.0, Double.MIN_VALUE};
		panel_2.setLayout(gbl_panel_2);
		
		JScrollPane scrollPane_2 = new JScrollPane();
		GridBagConstraints gbc_scrollPane_2 = new GridBagConstraints();
		gbc_scrollPane_2.fill = GridBagConstraints.BOTH;
		gbc_scrollPane_2.gridx = 0;
		gbc_scrollPane_2.gridy = 0;
		panel_2.add(scrollPane_2, gbc_scrollPane_2);
		
		JEditorPane stepsTxt = new JEditorPane();
		stepsTxt.setEditable(false);
		
		stepsTxt.setEditorKitForContentType("text/html", new Base64HtmlEditor());
		stepsTxt.setContentType("text/html");
		scrollPane_2.setViewportView(stepsTxt);
		
		//Update the form
		descTxt.setText(this.Description);
		descTxt.setCaretPosition(0);
		nameTxt.setText(this.Name);
		String HTML="<html><head><link rel='stylesheet' href='" + factionApi.getCSS() + "'>";
		HTML+="<style>body{font-size:9px;}h1{font-size:12px;}pre{font-size:9px; background-color: #eeeeee; padding: 10px}</style></head><body>";
		if(Details.contains("<pre") && Details.contains("Host:")){
			
			Details = UpdatePreTags(Details,0);
		}
		Details = Details.replace("#eee", "#eeeeee").replaceAll("rgb\\(.*\\)", "#eeeeee;") + "<br>";
		HTML += Details;
		HTML = HTML.replaceAll("<!--.*-->", "");
		HTML+="</body></html>";
		stepsTxt.addHyperlinkListener(new HyperlinkListener(){

			@Override
			public void hyperlinkUpdate(HyperlinkEvent e) {
				if(e.getEventType() == HyperlinkEvent.EventType.ACTIVATED){
					String request = e.getURL().getHost();
					byte []data = Base64.decode(URLDecoder.decode(request).getBytes());
					request = new String(data);
					String host = request.substring(request.indexOf("Host:"), request.indexOf("\r\n", request.indexOf("Host:")));
					host = host.replace("Host: ", "");
					host=host.trim();
					legacyCallback.sendToRepeater(host, 443, true, data, "From Faction");
				}
				
			}
			
		});
		if(this.Steps == null || this.Steps.size()==0){
			HTML = HTML + "<center><h3>No Exploit Steps found for this issue</h3></center>";
		}
		
		stepsTxt.setText(HTML);
		stepsTxt.setCaretPosition(0);
		
	}
	
	private String UpdatePreTags(String message,int start){
		int s = message.indexOf("<pre", start);
		if(s == -1){
			return message;
		}else{
			String begin = message.substring(0, message.indexOf("<pre", start));
			String end = message.substring(message.indexOf("<pre", start));
			int startPre = message.indexOf(">", message.indexOf("<pre",start))+1;
			int endPre = message.indexOf("</pre>", message.indexOf("<pre",start));
			String data = message.substring(startPre, endPre);
			if(data.contains("Host:")){
				data = StringEscapeUtils.unescapeHtml(data);
				data = data.replace("<br />", "\r\n");
				data = data.replace("<br>", "\r\n");
				data = data.replaceAll("<b>\\[\\ \\.\\.\\.snip\\.\\.\\.\\ \\]</b>", "");
				data = data.trim();
				data +="\r\n\r\n";
				byte[] b64 = Base64.encode(data.getBytes());
				String b64Str = new String(b64);
				message = begin + "&nbsp;&nbsp;<a class='btn' href='" + "http://"+URLEncoder.encode(b64Str)+ "'>Send to Repeater</a><br/>"+end;
			}
			int newStart = message.indexOf("</pre>", message.indexOf("<pre",start));
			return UpdatePreTags(message, newStart);
		}
	}
	

}
